name: Redeploy Containers With Changes

on:
  push:
    branches:
      - main
    paths:
      - '**/docker-compose.yaml' # Trigger the workflow on changes to YAML files
  workflow_dispatch:

jobs:
  Redeploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Identify changed Docker Compose files
      id: changed-containers
      run: |
        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.before }} ${{ github.sha }} | grep '\.yaml$' | grep -vE '\.github/workflows/.*\.yaml$' || true)
        CHANGED_CONTAINERS_CSV=$(echo "$CHANGED_FILES" | tr '\n' ',' | sed 's/,$//')
        echo "CHANGED_CONTAINERS=$CHANGED_CONTAINERS_CSV" >> "$GITHUB_OUTPUT"
        echo "$CHANGED_CONTAINERS_CSV"

    - name: Copy and deploy updated Docker Compose files
      id: deploy-containers
      env:
        CHANGED_CONTAINERS: ${{ steps.changed-containers.outputs.CHANGED_CONTAINERS }}
      run: |
        SUCCESSFUL_CONTAINERS=''
        FAILED_CONTAINERS=''
        IFS=',' read -ra FILES <<< "$CHANGED_CONTAINERS"
        for file in "${FILES[@]}"; do
          service_name=$(dirname "$file" | xargs basename)
          echo "Copying $file to server..."
          cp -f "$file" /home/kyle/docker-files/"$file"
          echo "Updating $service_name..."
          if DEPLOY_OUTPUT=$(docker compose -f /home/kyle/docker-files/"$file" up -d --force-recreate 2>&1); then
            SUCCESSFUL_CONTAINERS+=$service_name"," 
            echo "$service_name Deployed Successfully"
          else
            FAILED_CONTAINERS+=$service_name"," 
            echo "$service_name Failed To Deploy"
          fi
        done
        SUCCESSFUL_CONTAINERS=${SUCCESSFUL_CONTAINERS%,}
        echo "Successful Containers: $SUCCESSFUL_CONTAINERS"
        echo "SUCCESSFULY_DEPLOYED=$SUCCESSFUL_CONTAINERS" >> $GITHUB_OUTPUT
        FAILED_CONTAINERS=${FAILED_CONTAINERS%,}
        echo "Failed Containers: $FAILED_CONTAINERS"
        echo "FAILED_DEPLOYED=$FAILED_CONTAINERS" >> $GITHUB_OUTPUT

    - name: Send Notification on Fail
      env:
        SUCCESSFULY_DEPLOYED: ${{ steps.deploy-containers.outputs.SUCCESSFULY_DEPLOYED }}
        FAILED_DEPLOYED: ${{ steps.deploy-containers.outputs.FAILED_DEPLOYED }}
      if: ${{ steps.deploy-containers.outputs.FAILED_DEPLOYED != '' }}
      run: |
        curl \
        -u ${{ secrets.NTFY_LOGIN }} \
        -H "Title: Redeployment Failed" \
        -H "Tags: warning" \
        -H "Content-Type: text/plain" \
        -d "$FAILED_DEPLOYED encountered an error while redeploying." \
        ${{ secrets.NTFY_URL }}

        # curl \
        # -u ${{ secrets.NTFY_LOGIN }} \
        # -H "Title: Container Redeployed" \
        # -H "Tags: tada" \
        # -H "Content-Type: text/plain" \
        # -d "$service_name was redeployed successfully." \
        # ${{ secrets.NTFY_URL }}

        # curl \
        # -u ${{ secrets.NTFY_LOGIN }} \
        # -H "Title: Redeployment Failed" \
        # -H "Tags: warning" \
        # -H "Content-Type: text/plain" \
        # -d "$service_name encountered an error while redeploying.
        # Error: $(echo "$DEPLOY_OUTPUT" | cut -d':' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//')" \
        # ${{ secrets.NTFY_URL }}
        # echo "FAILED_CONTAINERS=" >> "$GITHUB_OUTPUT"