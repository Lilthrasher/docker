name: Redeploy Containers With Changes Debug

on:
  push:
    branches:
      - main
    paths:
      - '**/docker-compose.yaml' # Trigger the workflow on changes to YAML files
  workflow_dispatch:

jobs:
  Redeploy_Debug:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Identify changed Docker Compose files
      id: changed-containers
      run: |
        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.before }} ${{ github.sha }} | grep '\.yaml$' | grep -vE '\.github/workflows/.*\.yaml$' || true)
        CHANGED_FILES_CSV=$(echo "$CHANGED_FILES" | tr '\n' ',' | sed 's/,$//')
        echo "CHANGED_CONTAINERS=$CHANGED_FILES_CSV" >> "$GITHUB_OUTPUT"

    - name: Copy and deploy updated Docker Compose files
      env:
        CHANGED_CONTAINERS: ${{ steps.changed-containers.outputs.CHANGED_CONTAINERS }}
      run: |
        IFS=',' read -ra FILES <<< "$CHANGED_CONTAINERS"
        echo "Starting deployment process"
        echo "Current working directory: $(pwd)"
        echo "List of files in current directory: $(ls -la)"
        echo "CHANGED_CONTAINERS variable: $CHANGED_CONTAINERS"
        echo "$CHANGED_CONTAINERS"
        for file in "${FILES[@]}"; do
            echo "Processing file: $file"
            if [ -f "$file" ]; then
                echo "File exists: $file"
            else
                echo "File does not exist: $file"
            fi
        done

        for file in "${FILES[@]}"; do
          echo "Copying $file to server..."
          cp -f "$file" /home/kyle/docker-files/"$file"
        done
        cd /home/kyle/docker-files

        IFS=',' read -ra FILES <<< "$CHANGED_CONTAINERS"
        echo "Starting deployment process"
        echo "Current working directory: $(pwd)"
        echo "List of files in current directory: $(ls -la)"
        echo "CHANGED_CONTAINERS variable: $CHANGED_CONTAINERS"
        echo "$CHANGED_CONTAINERS"
        for file in "${FILES[@]}"; do
            echo "Processing file: $file"
            if [ -f "$file" ]; then
                echo "File exists: $file"
            else
                echo "File does not exist: $file"
            fi
        done

        for file in "${FILES[@]}"; do
          service_name=$(dirname "$file" | xargs basename)
          echo "Updating $service_name..."
          if DEPLOY_OUTPUT=$(docker compose -f "$file" up -d --force-recreate 2>&1); then
            curl \
              -u ${{ secrets.NTFY_LOGIN }} \
              -H "Title: Container Redeployed" \
              -H "Tags: tada" \
              -H "Content-Type: text/plain" \
              -d "$service_name was redeployed successfully." \
              ntfy.smithhomelab.com/Smith-Labs
              ${{ secrets.NTFY_URL }}
          else
            curl \
              -u ${{ secrets.NTFY_LOGIN }} \
              -H "Title: Redeployment Failed" \
              -H "Tags: warning" \
              -H "Content-Type: text/plain" \
              -d "$service_name encountered an error while redeploying.
              Error: $(echo "$DEPLOY_OUTPUT" | cut -d':' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//')" \
              ntfy.smithhomelab.com/Smith-Labs
              ${{ secrets.NTFY_URL }}
              exit 1
          fi
        done